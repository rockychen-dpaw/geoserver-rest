import threading
import queue
import collections

class TaskRunner(object):
    def __init__(self,name,geoserver,dop=1):
        """
        dop: degree of parallelism
        """
        self.dop = dop
        self.geoserver = geoserver
        self.tasks = queue.SimpleQueue()
        self.finished_tasks = queue.SimpleQueue()
        self.workers = None

    def add_task(self,task):
        """
        Should call this method in sync mode(in the same thread)
        """
        self.tasks.put(task)


    def start(self):
        self.workers = []
        for i in range(self.dop):
            self.workers = TaskWorker("TaskWorker-{}-{}".format(name,i + 1),self.tasks)
            


class TaskWorker(threading.Thread):
    shutdown = False
    def __init__(self,name,tasks):
        super().__init__(name=name,daemon=False)
        self.tasks = tasks
        self.start()

    def shutdown(self):
        self.shutdown = True

    def run(self):
        while self.shutdown == False:
            task = self.tasks.get(block=True,timeout=1)
            if not task:
                continue
            task.run()


        print("The task worker({}) is terminated.".format(self.name))
            








